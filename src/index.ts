import 'dotenv/config';
import {Telegraf, Markup, Context} from 'telegraf';
import {getPredict, getBeerInfo, getExchangeInfo} from './functions';
import {IArrCommandsMenu, IObjCommands, IObjHears} from './types';

// TODO –ù–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ netlify –ø–ª–æ—Ö–æ (–ø–æ—á—Ç–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é) –Ω–µ —Ä–∞–±–æ—Ç–∞—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–ø–æ—Å—ã

const bot = new Telegraf(<string>process.env.TOKEN_KEY);

enum objMenu {
    githubLink = 'üõ†Ô∏è –û—Ç–∫—Ä—ã—Ç—å Github',
    googleLink = 'üìÑ –û—Ç–∫—Ä—ã—Ç—å Google',
    beerLink = 'üçª –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω –ø–∏–≤–∞ (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)',
    beerRandomInfo = 'üç∫ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –ø–∏–≤–æ (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)',
    predict = 'üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ',
    exchange = 'üíµ –ö—É—Ä—Å –≤–∞–ª—é—Ç',
}
const objHears: IObjHears = {
    github: {
        name: 'Github',
        link: 'https://github.com/',
    },
    myGithub: {
        name: '–ú–æ—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Github',
        link: 'https://github.com/jenjarus',
    },
    google: {
        name: 'Google',
        link: 'https://google.com/',
    },
    beer: {
        name: '–ú–∞–≥–∞–∑–∏–Ω –ø–∏–≤–∞',
        link: 'https://jenjarus.github.io/React-Shop/',
    }
};
const objCommands: IObjCommands = {
    img: {
        command: 'img',
        description: '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    },
    predict: {
        command: 'predict',
        description: '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (–¥–∞ –∏–ª–∏ –Ω–µ—Ç)',
    },
    exchange: {
        command: 'exchange',
        description: '–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç',
    },
    remind: {
        command: 'remind',
        description: '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 14:30 —Å —Ç–µ–∫—Å—Ç–æ–º ‚Äú–í—Å—Ç—Ä–µ—á–∞‚Äù, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /remind 14:30 –í—Å—Ç—Ä–µ—á–∞',
    },
    remindday: {
        command: 'reminddata',
        description: '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 14:30 —Å —Ç–µ–∫—Å—Ç–æ–º ‚Äú–í—Å—Ç—Ä–µ—á–∞‚Äù, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /remindday 31.12.2007 14:30 –í—Å—Ç—Ä–µ—á–∞',
    }
};
const arrCommandsMenu: IArrCommandsMenu[] = [
    {
        command: objCommands.img.command,
        description: objCommands.img.description,
    },
    {
        command: objCommands.predict.command,
        description: objCommands.predict.description,
    },
    {
        command: objCommands.exchange.command,
        description: objCommands.exchange.description,
    },
];

bot.start((ctx: Context): void => {
    const chatName: string | undefined = ctx?.message?.from?.first_name ? ctx?.message?.from?.first_name : ctx?.message?.from?.username;
    const startMsg: string = `–ü—Ä–∏–≤–µ—Ç, ${chatName}! –Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç. –Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–≥–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ /${objCommands.predict.command}.

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ /${objCommands.img.command}.

–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ /${objCommands.remind.command} –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—á—á:–º–º —Ç–µ–∫—Å—Ç".
–ù–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ 15:30 —Å —Ç–µ–∫—Å—Ç–æ–º "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ", –Ω–∞–ø–∏—à–∏—Ç–µ "/${objCommands.remind.command} 15:30 –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ".

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç (–¥–æ–ª–ª–∞—Ä –∏ –µ–≤—Ä–æ), –Ω–∞–ø–∏—à–∏—Ç–µ /${objCommands.exchange.command}.
`;
    const arrMenuKeyboard: string[][] = [
        [objMenu.githubLink, objMenu.googleLink],
        [objMenu.beerLink],
        [objMenu.beerRandomInfo],
        [objMenu.predict, objMenu.exchange]
    ];

    /*ctx.reply(startMsg, Markup.keyboard(arrMenuKeyboard).oneTime().resize());*/
    ctx.reply(startMsg, Markup.keyboard(arrMenuKeyboard));
});

bot.help((ctx: Context): void => {ctx.reply('–≠—Ç–æ –ø–æ–º–æ—â—å.')});

bot.telegram.setMyCommands(arrCommandsMenu);

bot.hears(objMenu.githubLink, (ctx: Context): void => {
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç', Markup.inlineKeyboard([
        [
            Markup.button.url(objHears.github.name, objHears.github.link),
        ],
        [
            Markup.button.url(objHears.myGithub.name, objHears.myGithub.link),
        ]
    ]))
});

bot.hears(objMenu.googleLink, (ctx: Context): void => {
    ctx.reply('–û—Ç–∫—Ä—ã—Ç—å Google', Markup.inlineKeyboard([
        Markup.button.url(objHears.google.name, objHears.google.link)
    ]))
});

bot.hears(objMenu.beerLink, (ctx: Context): void => {
    ctx.reply('–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω –ø–∏–≤–∞ (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - api –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ)', Markup.inlineKeyboard([
        Markup.button.url(objHears.beer.name, objHears.beer.link)
    ]))
});

bot.hears(objMenu.beerRandomInfo, (ctx: Context): void => {
    /*getBeerInfo(ctx);*/
    ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - api –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ');
});

bot.hears(objMenu.predict, (ctx: Context): void => {
    getPredict(ctx);
});

bot.hears(objMenu.exchange, (ctx: Context): void => {
    getExchangeInfo(ctx);
});

bot.command(objCommands.remind.command, (ctx): void => {
    try {
        const [time, ...text]: string[] = ctx.message.text.split(`/${objCommands.remind.command} `)[1].split(' ');
        const [hours, minutes]: string[] = time.split(':');

        const now: Date = new Date();
        const remindTime: Date = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(hours), Number(minutes));

        if (remindTime < now) {
            ctx.reply('–í—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.');
            return;
        }

        setTimeout((): void => {
            ctx.reply(`–ù–∞–ø–æ–º–∏–Ω–∞—é: ${text.join(' ')}`);
        }, remindTime.getTime() - now.getTime());

        ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–æ–º–Ω—é :)');
    } catch (e) {
        ctx.reply('–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ :(');
    }
});

/*bot.command('reminddata', (ctx) => {
    const [date, time, ...text] = ctx.message.text.split('/reminddata ')[1].split(' ');
    const [day, month, year] = date.split('.');
    const [hours, minutes] = time.split(':');

    const now = new Date();
    const remindTime = new Date(year, month - 1, day, hours, minutes);

    if (remindTime < now) {
        ctx.reply('–í—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.');
        return;
    }

    setTimeout(() => {
        ctx.reply(`–ù–∞–ø–æ–º–∏–Ω–∞—é: ${text.join(' ')}`);
    }, remindTime - now);

    ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–æ–º–Ω—é :)');
});*/

bot.command(objCommands.img.command, (ctx: Context): void => {
    const images: string[] = [
        'https://placehold.co/200x300.png',
        'https://placehold.co/300x200.png',
        'https://placehold.co/200x200.png'
    ];
    const randomIndex:number = Math.floor(Math.random() * images.length);

    // ctx.replyWithPhoto(images[randomIndex], { caption: "cat photo" });
    ctx.replyWithPhoto({url: images[randomIndex]});
});

bot.command(objCommands.predict.command, (ctx: Context): void => {
    getPredict(ctx);
});

bot.command(objCommands.exchange.command, (ctx: Context):void => {
    getExchangeInfo(ctx);
});

// –î–ª—è —Ä–∞–±–æ—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ, –≤–∫–ª—é—á–∏—Ç—å bot.launch –∏ –æ—Ç–∫–ª—é—á–∏—Ç—å exports.handler, –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ, –Ω–∞–æ–±–æ—Ä–æ—Ç
//bot.launch();

exports.handler = async (event: { body: string; }) => {
    try {
        await bot.handleUpdate(JSON.parse(event.body))
        return { statusCode: 200, body: "" }
    } catch (e) {
        console.error("error in handler:", e)
        return { statusCode: 400, body: "This endpoint is meant for index and telegram communication" }
    }
}
